import{_ as e,c as s,a as t,o as a}from"./app-DOy2K5Px.js";const n={};function l(r,i){return a(),s("div",null,i[0]||(i[0]=[t(`<p>在开发过程中，<code>.gitignore</code> 文件是我们不可或缺的工具之一。它可以帮助我们忽略那些不需要纳入版本控制的文件，例如日志文件、生成的二进制文件、环境配置文件等。然而，偶尔会遇到 <code>.gitignore</code> 规则不生效的情况，令人困惑。<br> 别担心，这篇文章将从基础到深入，为你解答 <code>.gitignore</code> 失效的原因，并教你如何解决问题。</p><h2 id="一、了解-gitignore-的基本原理" tabindex="-1"><a class="header-anchor" href="#一、了解-gitignore-的基本原理"><span>一、了解 <code>.gitignore</code> 的基本原理</span></a></h2><h3 id="_1-1-什么是-gitignore-文件" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-gitignore-文件"><span>1.1 什么是 <code>.gitignore</code> 文件？</span></a></h3><p><code>.gitignore</code> 文件是 Git 的一部分，用来指定哪些文件或文件夹应该被忽略，不加入版本控制。其规则是基于模式匹配的，比如：</p><ul><li>忽略某种文件类型：<code>*.log</code></li><li>忽略某个文件夹：<code>/build/</code></li><li>忽略某些文件：<code>secrets.env</code></li></ul><h3 id="_1-2-gitignore-的作用范围" tabindex="-1"><a class="header-anchor" href="#_1-2-gitignore-的作用范围"><span>1.2 <code>.gitignore</code> 的作用范围</span></a></h3><p><code>.gitignore</code> 文件的作用范围可以是全局的（比如适用于你的整个开发环境）或局部的（针对某个项目）。</p><ul><li><strong>全局规则</strong>：通过配置全局 <code>.gitignore</code>（通常放在 <code>~/.gitignore_global</code>）实现。</li><li><strong>局部规则</strong>：直接在项目目录下放置 <code>.gitignore</code> 文件。</li></ul><h2 id="二、常见的-gitignore-规则失效场景" tabindex="-1"><a class="header-anchor" href="#二、常见的-gitignore-规则失效场景"><span>二、常见的 <code>.gitignore</code> 规则失效场景</span></a></h2><p>当 <code>.gitignore</code> 的规则没有生效时，通常是以下原因之一导致的：</p><h3 id="_2-1-文件已经被-git-跟踪" tabindex="-1"><a class="header-anchor" href="#_2-1-文件已经被-git-跟踪"><span>2.1 文件已经被 Git 跟踪</span></a></h3><p>这是最常见的原因。如果文件已经被提交到 Git 仓库，那么 <code>.gitignore</code> 不会再忽略它。换句话说，Git 只会对 <strong>未被跟踪的文件</strong> 应用 <code>.gitignore</code>。</p><p><strong>解决方案</strong>：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 停止跟踪文件，但保留文件本身</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cached</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fil</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-gitignore-规则有错误" tabindex="-1"><a class="header-anchor" href="#_2-2-gitignore-规则有错误"><span>2.2 <code>.gitignore</code> 规则有错误</span></a></h3><p>规则错误可能是由于语法问题、路径问题，或者规则的优先级设置不当导致的。例如：</p><ul><li><code>*.log</code> 忽略所有 <code>.log</code> 文件，但写成 <code>*log</code> 则无效。</li><li>相对路径和绝对路径混淆。</li></ul><p><strong>解决方案</strong>： 检查规则的语法是否正确，并确保路径匹配你的项目结构。</p><h2 id="三、深入剖析-gitignore-的规则语法" tabindex="-1"><a class="header-anchor" href="#三、深入剖析-gitignore-的规则语法"><span>三、深入剖析 <code>.gitignore</code> 的规则语法</span></a></h2><p>以下是 <code>.gitignore</code> 的关键语法规则和常见误区。</p><h3 id="_3-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_3-1-基本语法"><span>3.1 基本语法</span></a></h3><ul><li><strong>通配符匹配</strong>：<code>*.txt</code> 忽略所有 <code>.txt</code> 文件。</li><li><strong>忽略文件夹</strong>：<code>/build/</code> 忽略 <code>build</code> 文件夹。</li><li><strong>例外规则</strong>：<code>!important.txt</code> 强制跟踪 <code>important.txt</code>，即使被其他规则忽略。</li></ul><h3 id="_3-2-常见误区" tabindex="-1"><a class="header-anchor" href="#_3-2-常见误区"><span>3.2 常见误区</span></a></h3><ul><li><strong>忘记路径分隔符</strong>：<code>folder/</code> 与 <code>/folder/</code> 的区别。</li><li><strong>规则优先级</strong>：<code>!</code> 的例外规则优先级高于其他规则。</li></ul><h2 id="四、排查-gitignore-失效的系统性步骤" tabindex="-1"><a class="header-anchor" href="#四、排查-gitignore-失效的系统性步骤"><span>四、排查 <code>.gitignore</code> 失效的系统性步骤</span></a></h2><p>以下是系统化排查 <code>.gitignore</code> 规则不生效的方法。</p><h3 id="_4-1-检查文件是否被跟踪" tabindex="-1"><a class="header-anchor" href="#_4-1-检查文件是否被跟踪"><span>4.1 检查文件是否被跟踪</span></a></h3><p>运行以下命令查看文件的状态：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls-files</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fil</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果文件已被跟踪，使用 <code>git rm --cached</code> 停止跟踪。</p><h3 id="_4-2-检查-gitignore-文件是否正确加载" tabindex="-1"><a class="header-anchor" href="#_4-2-检查-gitignore-文件是否正确加载"><span>4.2 检查 <code>.gitignore</code> 文件是否正确加载</span></a></h3><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> check-ignore</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fil</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会显示具体哪条规则忽略了文件，或者为什么没有生效。</p><h3 id="_4-3-检查-gitignore-文件本身是否被忽略" tabindex="-1"><a class="header-anchor" href="#_4-3-检查-gitignore-文件本身是否被忽略"><span>4.3 检查 <code>.gitignore</code> 文件本身是否被忽略</span></a></h3><p>偶尔会发生 <code>.gitignore</code> 文件本身被忽略的情况，确保 <code>.gitignore</code> 文件没有被其他规则屏蔽。</p><p>好的，我会将<strong>文件已经提交过，后续添加 <code>.gitignore</code> 规则却不生效</strong>这一情况详细补充到文章中，并解释原因及解决方法。以下是更新后的内容：</p><h3 id="_4-4-文件已经提交-后续规则不生效" tabindex="-1"><a class="header-anchor" href="#_4-4-文件已经提交-后续规则不生效"><span><strong>4.4 文件已经提交，后续规则不生效</strong></span></a></h3><p>当文件已经提交到 Git 仓库后，即使后来在 <code>.gitignore</code> 中添加了忽略规则，Git 也不会停止对该文件的跟踪。这是因为 <code>.gitignore</code> 只对 <strong>未被跟踪的文件</strong> 生效，而已经被版本控制管理的文件不受影响。</p><p><strong>场景</strong>：<br> 假设项目中有一个 <code>config.json</code> 文件，它包含敏感信息。最初开发时不小心提交了这个文件，后来为了防止再次提交，新增了 <code>.gitignore</code> 规则：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>config.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然而，Git 仍然会继续跟踪这个文件，导致 <code>.gitignore</code> 无法生效。</p><hr><h3 id="原因分析" tabindex="-1"><a class="header-anchor" href="#原因分析"><span><strong>原因分析</strong></span></a></h3><p><code>.gitignore</code> 只对未被跟踪的文件生效，已经被 Git 跟踪的文件需要显式移除版本控制。</p><hr><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span><strong>解决方法</strong></span></a></h3><h4 id="步骤-1-从-git-跟踪中移除文件" tabindex="-1"><a class="header-anchor" href="#步骤-1-从-git-跟踪中移除文件"><span><strong>步骤 1：从 Git 跟踪中移除文件</strong></span></a></h4><p>使用以下命令从 Git 的索引中移除已提交的文件，但保留文件本身：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cached</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令的作用是删除 <code>config.json</code> 在版本控制中的记录，但不会删除本地文件。</p><h4 id="步骤-2-提交更改" tabindex="-1"><a class="header-anchor" href="#步骤-2-提交更改"><span><strong>步骤 2：提交更改</strong></span></a></h4><p>执行以下命令提交更改：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">移除 config.json 的版本控制</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="步骤-3-确保-gitignore-生效" tabindex="-1"><a class="header-anchor" href="#步骤-3-确保-gitignore-生效"><span><strong>步骤 3：确保 <code>.gitignore</code> 生效</strong></span></a></h4><p>此时，<code>config.json</code> 已被成功忽略。为了验证，可以创建一个临时修改，看看是否会被 Git 检测到：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">test</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config.json</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>git status</code> 未显示任何改动，则说明 <code>.gitignore</code> 规则已经生效。</p><hr><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span><strong>注意事项</strong></span></a></h3><ol><li>如果文件包含敏感信息，建议在移除文件后清理 Git 历史记录（防止通过旧版本查看敏感数据）。可以使用工具如 <code>BFG Repo-Cleaner</code> 或 Git 提供的 <code>filter-branch</code>。</li><li>如果需要删除整个目录，可以使用以下命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cached</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory_name</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">移除目录 directory_name 的版本控制</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="自动化移除文件-批量处理" tabindex="-1"><a class="header-anchor" href="#自动化移除文件-批量处理"><span><strong>自动化移除文件（批量处理）</strong></span></a></h3><p>如果有多个文件需要移除，可以结合 <code>.gitignore</code> 的规则批量处理。例如：</p><ol><li>更新 <code>.gitignore</code>，添加需要忽略的规则。</li><li>使用以下命令清理索引中被忽略的文件：</li></ol><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cached</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">批量移除已跟踪的文件</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上命令会强制移除所有已被 <code>.gitignore</code> 忽略的文件。</p><h2 id="五、-gitignore-高级技巧与实用案例" tabindex="-1"><a class="header-anchor" href="#五、-gitignore-高级技巧与实用案例"><span>五、<code>.gitignore</code> 高级技巧与实用案例</span></a></h2><h3 id="_5-1-全局-gitignore" tabindex="-1"><a class="header-anchor" href="#_5-1-全局-gitignore"><span>5.1 全局 <code>.gitignore</code></span></a></h3><p>配置全局忽略规则，适用于你的所有项目：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> core.excludesfile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ~/.gitignore_global</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-2-动态更新-gitignore-文件" tabindex="-1"><a class="header-anchor" href="#_5-2-动态更新-gitignore-文件"><span>5.2 动态更新 <code>.gitignore</code> 文件</span></a></h3><p>在团队协作中，你可能需要频繁调整 <code>.gitignore</code> 文件。推荐的方式是：</p><ol><li>新增规则时，通过团队代码评审确保正确性。</li><li>保持 <code>.gitignore</code> 的注释清晰。</li></ol><h2 id="六、常见问题与解答" tabindex="-1"><a class="header-anchor" href="#六、常见问题与解答"><span>六、常见问题与解答</span></a></h2><p><strong>问题 1：<code>.gitignore</code> 文件生效后，如何清理已经被提交的文件？</strong><br> 可以使用以下命令清理工作区的文件：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -fdx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>问题 2：我可以为子模块单独设置 <code>.gitignore</code> 吗？</strong><br> 是的，你可以在子模块的根目录下设置独立的 <code>.gitignore</code> 文件。</p><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><p><code>.gitignore</code> 是 Git 管理中强大的工具，但它的失效问题可能让人头疼。通过掌握 <code>.gitignore</code> 的原理、语法规则以及排查步骤，你可以轻松应对大多数问题。希望这篇文章能帮你在开发中更好地管理文件，提升效率！</p><p>如果你有更多疑问或者想分享自己的经验，欢迎留言讨论！</p><hr>`,82)]))}const o=e(n,[["render",l],["__file","15.html.vue"]]),h=JSON.parse('{"path":"/tech/15.html","title":"解决 .gitignore 规则不生效问题","lang":"zh-CN","frontmatter":{"tags":["技术文档"],"cover":"/img/154.jpg","title":"解决 .gitignore 规则不生效问题","description":"在开发过程中，.gitignore 文件是我们不可或缺的工具之一。它可以帮助我们忽略那些不需要纳入版本控制的文件，例如日志文件、生成的二进制文件、环境配置文件等。然而，偶尔会遇到 .gitignore 规则不生效的情况，令人困惑。 别担心，这篇文章将从基础到深入，为你解答 .gitignore 失效的原因，并教你如何解决问题。 一、了解 .gitign...","head":[["meta",{"property":"og:url","content":"https://docs.wenturc.com/tech/15.html"}],["meta",{"property":"og:site_name","content":"WentUrc Docs"}],["meta",{"property":"og:title","content":"解决 .gitignore 规则不生效问题"}],["meta",{"property":"og:description","content":"在开发过程中，.gitignore 文件是我们不可或缺的工具之一。它可以帮助我们忽略那些不需要纳入版本控制的文件，例如日志文件、生成的二进制文件、环境配置文件等。然而，偶尔会遇到 .gitignore 规则不生效的情况，令人困惑。 别担心，这篇文章将从基础到深入，为你解答 .gitignore 失效的原因，并教你如何解决问题。 一、了解 .gitign..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docs.wenturc.com/img/154.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-09T04:43:07.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docs.wenturc.com/img/154.jpg"}],["meta",{"name":"twitter:image:alt","content":"解决 .gitignore 规则不生效问题"}],["meta",{"property":"article:tag","content":"技术文档"}],["meta",{"property":"article:modified_time","content":"2025-01-09T04:43:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解决 .gitignore 规则不生效问题\\",\\"image\\":[\\"https://docs.wenturc.com/img/154.jpg\\"],\\"dateModified\\":\\"2025-01-09T04:43:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、了解 .gitignore 的基本原理","slug":"一、了解-gitignore-的基本原理","link":"#一、了解-gitignore-的基本原理","children":[{"level":3,"title":"1.1 什么是 .gitignore 文件？","slug":"_1-1-什么是-gitignore-文件","link":"#_1-1-什么是-gitignore-文件","children":[]},{"level":3,"title":"1.2 .gitignore 的作用范围","slug":"_1-2-gitignore-的作用范围","link":"#_1-2-gitignore-的作用范围","children":[]}]},{"level":2,"title":"二、常见的 .gitignore 规则失效场景","slug":"二、常见的-gitignore-规则失效场景","link":"#二、常见的-gitignore-规则失效场景","children":[{"level":3,"title":"2.1 文件已经被 Git 跟踪","slug":"_2-1-文件已经被-git-跟踪","link":"#_2-1-文件已经被-git-跟踪","children":[]},{"level":3,"title":"2.2 .gitignore 规则有错误","slug":"_2-2-gitignore-规则有错误","link":"#_2-2-gitignore-规则有错误","children":[]}]},{"level":2,"title":"三、深入剖析 .gitignore 的规则语法","slug":"三、深入剖析-gitignore-的规则语法","link":"#三、深入剖析-gitignore-的规则语法","children":[{"level":3,"title":"3.1 基本语法","slug":"_3-1-基本语法","link":"#_3-1-基本语法","children":[]},{"level":3,"title":"3.2 常见误区","slug":"_3-2-常见误区","link":"#_3-2-常见误区","children":[]}]},{"level":2,"title":"四、排查 .gitignore 失效的系统性步骤","slug":"四、排查-gitignore-失效的系统性步骤","link":"#四、排查-gitignore-失效的系统性步骤","children":[{"level":3,"title":"4.1 检查文件是否被跟踪","slug":"_4-1-检查文件是否被跟踪","link":"#_4-1-检查文件是否被跟踪","children":[]},{"level":3,"title":"4.2 检查 .gitignore 文件是否正确加载","slug":"_4-2-检查-gitignore-文件是否正确加载","link":"#_4-2-检查-gitignore-文件是否正确加载","children":[]},{"level":3,"title":"4.3 检查 .gitignore 文件本身是否被忽略","slug":"_4-3-检查-gitignore-文件本身是否被忽略","link":"#_4-3-检查-gitignore-文件本身是否被忽略","children":[]},{"level":3,"title":"4.4 文件已经提交，后续规则不生效","slug":"_4-4-文件已经提交-后续规则不生效","link":"#_4-4-文件已经提交-后续规则不生效","children":[]},{"level":3,"title":"原因分析","slug":"原因分析","link":"#原因分析","children":[]},{"level":3,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"自动化移除文件（批量处理）","slug":"自动化移除文件-批量处理","link":"#自动化移除文件-批量处理","children":[]}]},{"level":2,"title":"五、.gitignore 高级技巧与实用案例","slug":"五、-gitignore-高级技巧与实用案例","link":"#五、-gitignore-高级技巧与实用案例","children":[{"level":3,"title":"5.1 全局 .gitignore","slug":"_5-1-全局-gitignore","link":"#_5-1-全局-gitignore","children":[]},{"level":3,"title":"5.2 动态更新 .gitignore 文件","slug":"_5-2-动态更新-gitignore-文件","link":"#_5-2-动态更新-gitignore-文件","children":[]}]},{"level":2,"title":"六、常见问题与解答","slug":"六、常见问题与解答","link":"#六、常见问题与解答","children":[]},{"level":2,"title":"七、总结","slug":"七、总结","link":"#七、总结","children":[]}],"readingTime":{"minutes":5.71,"words":1713},"git":{"createdTime":1736397787000,"updatedTime":1736397787000,"contributors":[{"name":"冰苷晶","email":"2749332490@qq.com","commits":1,"url":"https://github.com/冰苷晶"}]},"autoDesc":true,"filePathRelative":"tech/15.md","categoryList":[{"id":"d9f913","sort":10011,"name":"tech"}],"bulletin":false}');export{o as comp,h as data};
